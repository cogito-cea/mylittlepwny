#+TITLE:     mylittlepwny
#+AUTHOR:    Damien Courouss√© -- CEA
#+EMAIL:     damien.courousse@cea.fr
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   email:t
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [8pt]

# export pdf: C-c C-e l O   //   org-beamer-export-to-pdf

#+ATTR_LATEX: :options basicstyle=\ttfamily\scriptsize

* mylittlepwny

******** TODO add a few intro words

** Setup, build, test

*** Get the source code

https://github.com/cogito-cea/mylittlepwny

*** Build that thing

Two options.  Either build and run with =stack=, or using a docker
image.

**** Using =stack=

 Install =stack=.  Follow the documentation [[https://docs.haskellstack.org/en/stable/README/#how-to-install][here]].

 Then run, from the root of the source directory:
 #+BEGIN_EXAMPLE
 stack setup
 stack build
 #+END_EXAMPLE

 You can install =mylittlepwny= locally in =$HOME/.local/bin= with:
 #+BEGIN_EXAMPLE
 stack install
 #+END_EXAMPLE

**** With docker

Load the docker image:
#+BEGIN_EXAMPLE
$ docker load -i mylittlepwny-<VERSION>.tar.gz
#+END_EXAMPLE

Run it:
#+BEGIN_EXAMPLE
$ docker run -it --rm mylittlepwny bash
Starting with UID : 9001
dockeruser@9e2f8654b323:/mylittlepwny$ mylittlepwny --help
Usage: mylittlepwny [--version] COMMAND
  CPA from on-disk traces

Available options:
  -h,--help                Show this help text
  --version                Show version

Available commands:
  view                     View traces
  cpa                      CPA analysis
  ttest                    Non-specific t-test
  specific                 Specific t-test
#+END_EXAMPLE

*** Run that thing.  Frow =$PATH=

Assuming that =mylittlepwny= is install somewhere in one of the
directories listed in =$PATH= (for exemple, in =$HOME/.local/bin=
after a =stack install=):

#+BEGIN_EXAMPLE
$ mylittlepwny --version
0.4.0.0
#+END_EXAMPLE

*** Run that thing.  Using stack

#+BEGIN_EXAMPLE
$ stack exec mylittlepwny -- --version
0.4.0.0
#+END_EXAMPLE

You can install =mylittlepwny= locally in =$HOME/.local/bin= with:
#+BEGIN_EXAMPLE
stack install
#+END_EXAMPLE

Once =$HOME/.local/bin= is declared in your =PATH= variable:

#+BEGIN_EXAMPLE
$ mylittlepwny --version
0.4.0.0
#+END_EXAMPLE

*** Run that thing.  Using the docker image

Suppose we want to use the tool on some traces located on the host
machine in the directory =TRACES=.

Either run commands from a docker container:
#+BEGIN_EXAMPLE
$ docker run -it --rm -v $(pwd)/tests/traces:/traces mylittlepwny bash
Starting with UID : 9001
dockeruser@3971267adbab:/mylittlepwny$ mylittlepwny --version
0.4.0.0
#+END_EXAMPLE

Or instantiate a new container each time:

#+BEGIN_EXAMPLE
$ docker run -it --rm -v $(pwd)/tests/traces:/traces mylittlepwny mylittlepwny --version
Starting with UID : 9001
0.4.0.0
#+END_EXAMPLE

** Format of the side-channel traces

The preferred (and most efficient) format is [[*Format of the side-channel traces: raw files][raw]].

*** Format of the side-channel traces: raw files

#+BEGIN_EXAMPLE
# header:
<nb of samples> <sample size>
# the stream of samples
<sample> <sample> <sample> ...
#+END_EXAMPLE

A raw file contains:
- a small header of 2 32-bit =unsigned int=s:
  - =<nb of samples>=: number of samples per side-channel /trace/.  A
    full file will probably contain more that one side-channel /trace/.
  - =<sample size>=: byte size of each sample.  Each sample value is
    expected to be encoded as =unsigned int= values.
- the stream of samples

*** Format of the side-channel traces: text files

All files are located in the same directory, and each text file is
expected to contain the samples of one side-channel trace.
Sample values are represented with a textual, decimal representation.

#+BEGIN_EXAMPLE
<TRACEDIR>/trace_000000000.txt
<TRACEDIR>/trace_000000001.txt
<TRACEDIR>/trace_000000002.txt
<TRACEDIR>/trace_000000003.txt
<TRACEDIR>/trace_000000004.txt
<TRACEDIR>/trace_000000005.txt
<TRACEDIR>/trace_000000006.txt
<TRACEDIR>/trace_000000007.txt
<TRACEDIR>/trace_000000008.txt
<TRACEDIR>/trace_000000009.txt
#+END_EXAMPLE

** Tests

A small sample set of side-channel traces is provided with the source
code, for test purposes, in directory =tests/traces=.

*** Test: view traces

#+BEGIN_EXAMPLE
$ stack exec mylittlepwny -- view -f tests/traces/unprotected.raw  -n 16
View Settings:
average over:               16
tmin:                        0
tmax:                     1000
first trace:                 0

Rendering the view plot in: tests/traces/Traces avg:16 n:0 tmin:00000 tmax:01000.png
#+END_EXAMPLE

*** Test: CPA

#+BEGIN_EXAMPLE
$ stack exec mylittlepwny -- cpa -f tests/traces/unprotected.raw -t tests/traces/plaintexts.txt -n 100
CPA Settings:
number of traces:          100
tmin:                        0
tmax:                     1000

Max correlation value: 0.6940127611160278
   found for key byte #1.0

Rendering the CPA plot in: tests/traces/CPA-T byte:0 n:100 tmin:00000 tmax:01000.png
Rendering the CPA plot in: tests/traces/CPA-D byte:0 n:100 tmin:00000 tmax:01000.png
#+END_EXAMPLE

*** Test: non-specific t-test

This test would require a set of side-channel of trace that is different from
the set of traces provided in the =tests= directory.

******** TODO add a set of traces for the non-specific t-test
    :PROPERTIES:
    :TRIGGER:  chain-find-next(TODO,todo-only)
    :END:

*** Test: specific t-test

Caution note: you need more side-channel traces to get something
interesting out of this.

#+BEGIN_EXAMPLE
$ stack exec mylittlepwny -- specific -f tests/traces/unprotected.raw -t tests/traces/plaintexts.txt -k tests/traces/key.txt -n 100 -b 0
Specific t-test.  Settings:
Total number of traces:        100
tmin:                            0
tmax:                         1000
Specific t-test on bit:          0

Rendering the TTest plot in: tests/traces/TTest-S n:100 tmin:00000 tmax:01000 b:000.png
#+END_EXAMPLE

** Side-Channel Analysis

*** Tool usage #1

Getting help:

#+BEGIN_EXAMPLE
$ mylittlepwny --help
Usage: mylittlepwny [--version] COMMAND
  CPA from on-disk traces

Available options:
  -h,--help                Show this help text
  --version                Show version

Available commands:
  view                     View traces
  cpa                      CPA analysis
  ttest                    Non-specific t-test
  specific                 Specific t-test
#+END_EXAMPLE

*** Tool usage #2

Getting  help for  a specific command:

#+BEGIN_EXAMPLE
$ mylittlepwny COMMAND --help
#+END_EXAMPLE

e.g.:

#+BEGIN_EXAMPLE
$ mylittlepwny view --help
Usage: mylittlepwny view ((-d|--traces-dir TRACES_DIR) |
                         (-f|--trace-rawfile TRACE_RAWFILE)) [--tmin TMIN]
                         [--tmax TMAX] [-n|--average-over AVG_SIZE]
                         [-m|--first-trace FIRST_TRACES]
  View traces

Available options:
  -d,--traces-dir TRACES_DIR
                           Location of the directory with traces files, in
                           textual format.
  -f,--trace-rawfile TRACE_RAWFILE
                           Location of the trace files, in raw format.
  --tmin TMIN              Sample number for the start of the observation window
                           [default: 0].
  --tmax TMAX              Sample number for the end of the observation window
                           [default: full trace length].
  -n,--average-over AVG_SIZE
                           Compute an average over AVG_SIZE traces [default: 1]
  -m,--first-trace FIRST_TRACES
                           Number of the first trace to consider [default: 0]
  -h,--help                Show this help text
#+END_EXAMPLE

*** View traces

The command =view= plots traces for visual inspection.

#+BEGIN_EXAMPLE
$ mylittlepwny view --help
Usage: mylittlepwny view ((-d|--traces-dir TRACES_DIR) |
                         (-f|--trace-rawfile TRACE_RAWFILE)) [--tmin TMIN]
                         [--tmax TMAX] [-n|--average-over AVG_SIZE]
                         [-m|--first-trace FIRST_TRACES]
  View traces

Available options:
  -d,--traces-dir TRACES_DIR
                           Location of the directory with traces files, in
                           textual format.
  -f,--trace-rawfile TRACE_RAWFILE
                           Location of the trace files, in raw format.
  --tmin TMIN              Sample number for the start of the observation window
                           [default: 0].
  --tmax TMAX              Sample number for the end of the observation window
                           [default: full trace length].
  -n,--average-over AVG_SIZE
                           Compute an average over AVG_SIZE traces [default: 1]
  -m,--first-trace FIRST_TRACES
                           Number of the first trace to consider [default: 0]
  -h,--help                Show this help text
#+END_EXAMPLE

Typical usage:

#+BEGIN_EXAMPLE
$ mylittlepwny view -f tests/traces/unprotected.raw -n 16
#+END_EXAMPLE

*** CPA

Run a correlation power analysis.

#+BEGIN_EXAMPLE
$ mylittlepwny cpa --help
Usage: mylittlepwny cpa ((-d|--traces-dir TRACES_DIR) |
                        (-f|--trace-rawfile TRACE_RAWFILE)) [--tmin TMIN]
                        [--tmax TMAX] (-t|--textfile TEXTFILE)
                        [-k|--keyfile KEYFILE] [-n|--nbtraces NSIWE]
                        [-b|--byte BYTE]
  CPA analysis

Available options:
  -d,--traces-dir TRACES_DIR
                           Location of the directory with traces files, in
                           textual format.
  -f,--trace-rawfile TRACE_RAWFILE
                           Location of the trace files, in raw format.
  --tmin TMIN              Sample number for the start of the observation window
                           [default: 0].
  --tmax TMAX              Sample number for the end of the observation window
                           [default: full trace length].
  -t,--textfile TEXTFILE   Location of the plaintexts file
  -k,--keyfile KEYFILE     Location of the key file
  -n,--nbtraces NSIWE      Number of traces used for the CPA analysis [default:
                           512]
  -b,--byte BYTE           Number of the key byte to attack [default: 0]
  -h,--help                Show this help text
#+END_EXAMPLE

*** Non-specific t-test

#+BEGIN_EXAMPLE
$ mylittlepwny ttest --help
Usage: mylittlepwny ttest ((-d|--traces-dir TRACES_DIR) |
                          (-f|--trace-rawfile TRACE_RAWFILE)) [--tmin TMIN]
                          [--tmax TMAX] [-n|--nbtraces NSIWE]
                          (-c|--classesFile CLASSESFILE)
  Non-specific t-test

Available options:
  -d,--traces-dir TRACES_DIR
                           Location of the directory with traces files, in
                           textual format.
  -f,--trace-rawfile TRACE_RAWFILE
                           Location of the trace files, in raw format.
  --tmin TMIN              Sample number for the start of the observation window
                           [default: 0].
  --tmax TMAX              Sample number for the end of the observation window
                           [default: full trace length].
  -n,--nbtraces NSIWE      Number of traces used for the CPA analysis [default:
                           512]
  -c,--classesFile CLASSESFILE
                           Location of the 'classes file'
  -h,--help                Show this help text
#+END_EXAMPLE

*** Non-specific t-test

+ Instead of a plaintext file, this test requires a 'separation file',
  i.e. a file that describes the population each trace belongs to.
+ The separation is expected to follow the order of the traces in the
  traces file.
+ This is a text file, containing either =0= or =1=, respectively for
  the first and the second populations of traces used to build the
  t-test.

Example :
#+BEGIN_EXAMPLE
$ head separate-ttest-NS.txt
0
0
0
0
1
0
0
1
0
0
#+END_EXAMPLE

Example usage:

#+BEGIN_EXAMPLE
$ mylittlepwny -f ~/src/SSPREW/traces/testfull-NS/traces.raw \
               -c ~/src/SSPREW/traces/separate-ttest-NS.txt  \
               -n 22000 --tmin 7500 --tmax 10000
#+END_EXAMPLE

*** Specific t-test

#+BEGIN_EXAMPLE
$ mylittlepwny specific --help
Usage: mylittlepwny specific ((-d|--traces-dir TRACES_DIR) |
                             (-f|--trace-rawfile TRACE_RAWFILE)) [--tmin TMIN]
                             [--tmax TMAX] [-n|--nbtraces NSIWE]
                             (-t|--textfile TEXTFILE) (-k|--keyfile KEYFILE)
                             (-b|--target-bit BIT)
  Specific t-test

Available options:
  -d,--traces-dir TRACES_DIR
                           Location of the directory with traces files, in
                           textual format.
  -f,--trace-rawfile TRACE_RAWFILE
                           Location of the trace files, in raw format.
  --tmin TMIN              Sample number for the start of the observation window
                           [default: 0].
  --tmax TMAX              Sample number for the end of the observation window
                           [default: full trace length].
  -n,--nbtraces NSIWE      Number of traces used for the CPA analysis [default:
                           512]
  -t,--textfile TEXTFILE   Location of the plaintexts file
  -k,--keyfile KEYFILE     Location of the key file
  -b,--target-bit BIT      single-bit t-test on bit #BIT in the output of the
                           first SBOX
  -h,--help                Show this help text
#+END_EXAMPLE

*** Specific t-test

Run the t-test on the output of the first SubBytes operation.

Currently requires at least:
- a set of traces
- the list of input plaintexts
- the description of the secret key

** FAQ

*** What is this error? =Data.Binary.Get.runGet at position 0: not enough bytes=

Issue:
#+BEGIN_EXAMPLE
mylittlepwny: Data.Binary.Get.runGet at position 0: not enough bytes
CallStack (from HasCallStack):
  error, called at libraries/binary/src/Data/Binary/Get.hs:351:5 in binary-0.8.5.1:Data.Binary.Get
#+END_EXAMPLE

Solution: run with option =-n= | =--nb=

Explanation:
By default, the analysis are run with 512 traces if option =-n= is not
set.  It may happen that the input set of traces contains less than
512 traces, which will lead to this error.
This behaviour should be fixed in the near future.

******** TODO fix issue when the set of traces contains less than 512 traces.
    :PROPERTIES:
    :TRIGGER:  chain-find-next(TODO,todo-only)
    :END:

** Limitations and known issues

*** Performance

+ =mylittlepwny= can exploit all the processors available on your
  machine.  Increasing the number of processors/cores used should
  reduce the processing time.
+ However, the performance is quite bad.  It may happen that the
  execution time increases when all cores are used.  It may also
  happen that the exection time is higher when running on all cores,
  as compared to running on one core only!
+ To specify the number of cores used, run =mylittlepwny= as follows (here using 2 cores)

#+BEGIN_EXAMPLE
$ mylittlepwny +RTS -N2 -RTS <‚Ä¶ here come other options ‚Ä¶>
#+END_EXAMPLE

or:

#+BEGIN_EXAMPLE
$ mylittlepwny <‚Ä¶ here come other options ‚Ä¶> +RTS -N2
#+END_EXAMPLE

*** Format of trace files

Raw files:
currently, 16-bit int samples are only supported.

*** CPA

Model: Currently only supports the Hamming Weight.

Hypothesis: can currently only target the output of the first
SubBytes.

*** non-specific t-test

Target hypothesis: Currently only supports the output of the first SubBytes.

** References

Paul Bottinelli and Joppe W. Bos. Computational aspects of correlation
power analysis. J. Cryptographic Engineering, 7(3):167‚Äì181, 2017.

Other tools for side-channel analysis:
- https://github.com/Riscure/Jlsca
- https://github.com/newaetech/chipwhisperer-lint
- https://github.com/ikizhvatov/dpa-tools-benchmarking
- https://github.com/ikizhvatov/conditional-reduction
- https://github.com/Ledger-Donjon/lascar

* cpa-hyps

*** Overview of program options

#+BEGIN_SRC shell :exports both :results output
stack exec cpa-hyps -- --help
#+END_SRC

#+results:
#+begin_example
cpa-hyps: compute hypothesis values for CPA attacks on AES.

Usage: cpa-hyps [-o|--output FILE] [-n|--nb NUMBER] [-x|--seed SEED_VALUE]
                COMMAND
  cpa-hyps: a few bunch of things to perform side channel attacks. Use COMMAND
  --help to see the list of options supported by each command.

Available options:
  -h,--help                Show this help text
  -o,--output FILE         Name of the output file (default: "output.txt")
  -n,--nb NUMBER           Size of the set of plaintexts
                           generated (default: 16384)
  -x,--seed SEED_VALUE     Seed of the random number generator (default: 0)

Available commands:
  version                  Print program version
  plaintexts               Generate a list of random plaintexts
  addrk                    Compute hypothesis values for the first AddRoundKey,
                           using a Hamming weight model.
  sbox                     Compute hypothesis values for the first SBOX, using a
                           Hamming weight model.
  ttest-fr                 Compute two populations of plaintexts for the
                           non-specific t-test (fixed vs. random), for the
                           output of the first SBOX. Generates two plaintext
                           files named after the contents of options
                           --population0 and --population1.
  ttest-rr                 Compute two populations of plaintexts for the
                           specific t-test (random vs. random), for the output
                           of the first SBOX. Generates a list of plaintexts and
                           a list of values {0,1} to separate the two t-test
                           populations.
#+end_example

(org-babel-get-header)

*** command =plaintexts=

Use this command to generate a list of random plaintexts.  This
command has no specific option.

#+BEGIN_SRC shell :exports both :results output
stack exec cpa-hyps -- plaintexts --help
#+END_SRC

#+results:
: Usage: cpa-hyps plaintexts
:   Generate a list of random plaintexts
:
: Available options:
:   -h,--help                Show this help text

*** command =sbox=

Use this command to generate the CPA correlation hypothesis at the
output of the first SubBytes computation in AES.  Currently we use the
Hamming Weight to compute the power model.

#+BEGIN_SRC shell :exports both :results output
stack exec cpa-hyps -- sbox --help
#+END_SRC

#+results:
: Usage: cpa-hyps sbox (-p|--plaintexts ARG) [-b|--byte ARG]
:   Compute hypothesis values for the first SBOX, using a Hamming weight model.
:
: Available options:
:   -p,--plaintexts ARG      Name of the input file containing the plaintext
:                            values
:   -b,--byte ARG            Byte number in [0..15] used to compute CPA
:                            correlation hypothesis (default: 0)
:   -h,--help                Show this help text

******** TODO introduce the Hamming Distance model
    :PROPERTIES:
   :TRIGGER:  chain-find-next(TODO,todo-only,from-bottom)
   :END:

*** command =ttest-fr=

Provides two input plaintext populations to perform a specific fixed vs. random
t-test.

#+BEGIN_SRC shell :exports both :results output
stack exec cpa-hyps -- ttest-fr --help
#+END_SRC

#+results:
#+begin_example
Usage: cpa-hyps ttest-fr [-p|--plaintexts ARG] [-s|--separate ARG]
  Compute two populations of plaintexts for the non-specific t-test (fixed vs.
  random), for the output of the first SBOX. Generates two plaintext files named
  after the contents of options --population0 and --population1.

Available options:
  -p,--plaintexts ARG      Name of the output file containing the plaintext
                           values for the two
                           populations. (default: "plaintexts.txt")
  -s,--separate ARG        This generated files has the same length than the
                           plaintext file. It contains a list of integer values
                           either 0 or 1, in order to separate the plaintexts
                           between two populations '0' and
                           '1'. (default: "text-separate.txt")
  -h,--help                Show this help text
#+end_example

*** command =ttest=rr=

Provides two input plaintext populations to perform a specific random vs. random
t-test.

#+BEGIN_SRC shell :exports both :results output
stack exec cpa-hyps -- ttest-rr --help
#+END_SRC

#+results:
#+begin_example
Usage: cpa-hyps ttest-rr (-k|--key KEYFILE) [-b|--bit-number BIT_NUMBER]
                         [-p|--plaintexts ARG] [-s|--separate ARG]
                         [-c|--ciphers CIPHERS]
  Compute two populations of plaintexts for the specific t-test (random vs.
  random), for the output of the first SBOX. Generates a list of plaintexts and
  a list of values {0,1} to separate the two t-test populations.

Available options:
  -k,--key KEYFILE         the input key file
  -b,--bit-number BIT_NUMBER
                           number of the state bit observed (default: 0)
  -p,--plaintexts ARG      Name of the output file containing the plaintext
                           values for the two
                           populations. (default: "plaintexts.txt")
  -s,--separate ARG        This generated files has the same length than the
                           plaintext file. It contains a list of integer values
                           either 0 or 1, in order to separate the plaintexts
                           between two populations '0' and
                           '1'. (default: "text-separate.txt")
  -c,--ciphers CIPHERS     Generate the lists of expected cipher values in file
                           CIPHERS. The file is not generated if this option is
                           not used.
  -h,--help                Show this help text
#+end_example
