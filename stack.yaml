# For more information, see: https://github.com/commercialhaskell/stack/blob/release/doc/yaml_configuration.md

# Specifies the GHC version and set of packages available (e.g., lts-3.5, nightly-2015-09-21, ghc-7.10.2)
resolver: lts-12.5

# Local packages, usually specified by relative directory name
packages:
- '.'

# Packages to be pulled from upstream that are not in the resolver (e.g., acme-missiles-0.3)
extra-deps:
- Chart-1.9
- Chart-cairo-1.9
- text-format-0.3.2
- serialport-0.4.7

# Override default flag values for local packages and extra-deps
flags: {}

# Extra package databases containing global packages
extra-package-dbs: []

# Control whether we use the GHC we find on the path
# system-ghc: true

# Require a specific version of stack, using version ranges
# require-stack-version: -any # Default
# require-stack-version: >= 0.1.10.0

# Override the architecture used by stack, especially useful on Windows
# arch: i386
# arch: x86_64

# Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]

docker:
    # docker is disabled by default.  use stack's docker integration with 'stack --docker'
    enable: false

image:
  # build the image with stack --docker image container

  # You need a `containers` yaml section for `stack image container`.
  # A `container` section that does not contain a list is also valid.
  containers:

    # This example just has one container.
    -
      # You need a base image name. Stack layers exes on top of
      # the base image. Prepare your project image in advance by
      # putting all your runtime dependencies in the image.
      base: "mylittlepwny:build"

      # Optionally add a directory to a path inside the docker image.
      # add:
      #   traces/: /traces/

      # Optionally specify a list of executables. Stack will create
      # a tagged image for each in the list. these images will have
      # their respective "ENTRYPOINT" set.
      executables:
        - mylittlepwny
